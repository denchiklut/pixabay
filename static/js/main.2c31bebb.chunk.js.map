{"version":3,"sources":["components/navbar/NavBar.js","components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","title","ImageResults","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContetnt","_this2","this","images","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","OnTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","OnAmountChange","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_results_ImageResults","App","MuiThemeProvider_default","navbar_NavBar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c31bebb.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from 'material-ui/AppBar'\r\n\r\nconst NavBar = () => <AppBar title=\"Pixabay\"/>\r\n\r\nexport default NavBar;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {GridList, GridTile} from 'material-ui/GridList';\r\nimport IconButton from 'material-ui/IconButton';\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton from 'material-ui/FlatButton';\r\n\r\nclass ImageResults extends Component {\r\n    state = {\r\n        open: false,\r\n        currentImg: ''\r\n    };\r\n\r\n    handleOpen = img => {\r\n        this.setState({open: true, currentImg: img})\r\n    };\r\n\r\n    handleClose = img => {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        let imageListContetnt;\r\n        const { images } = this.props;\r\n        \r\n        if (images) {\r\n            imageListContetnt = (\r\n                <GridList cols={3}>\r\n                    {images.map(img => (\r\n                        <GridTile\r\n                            title={img.tags}\r\n                            key={img.id}\r\n                            subtitle={\r\n                                <span>\r\n                                    by <strong>{img.user}</strong>\r\n                                </span>\r\n                            }\r\n                            actionIcon={\r\n                                <IconButton\r\n                                    onClick={()=> this.handleOpen(img.largeImageURL)}>\r\n                                    <ZoomIn color=\"white\"/>\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            <img src={img.largeImageURL} alt=\"\"/>\r\n                        </GridTile>\r\n                    ))}\r\n                </GridList>\r\n            )\r\n        }else {\r\n            imageListContetnt = null;\r\n        }\r\n\r\n        const actions = [\r\n            <FlatButton\r\n                label=\"Close\"\r\n                primary={true}\r\n                onClick={this.handleClose}\r\n            />\r\n        ];\r\n        \r\n        return (\r\n            <div>\r\n                {imageListContetnt}\r\n                <Dialog\r\n                    actions={actions}\r\n                    modal={false}\r\n                    open={this.state.open}\r\n                    onRequestClose={this.handleClose}\r\n                >\r\n                    <img src={this.state.currentImg} style={{width: '100%'}} alt=\"\"/>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nImageResults.propTypes ={\r\n    images: PropTypes.array.isRequired\r\n};\r\nexport default ImageResults;","import React, {Component} from 'react';\r\nimport TextField from 'material-ui/TextField'\r\nimport SelectField from 'material-ui/SelectField'\r\nimport MenuItem from 'material-ui/MenuItem'\r\nimport axios from 'axios'\r\nimport ImageResults from '../image-results/ImageResults'\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        searchText: '',\r\n        amount: 15,\r\n        images: [],\r\n        apiUrl: 'https://pixabay.com/api/',\r\n        apiKey: '10525886-4fa03ab17ae9b207f00727f06'\r\n    };\r\n\r\n    OnTextChange = (e) => {\r\n        const val = e.target.value;\r\n        this.setState({[e.target.name]: val}, () => {\r\n            if (val === '') {\r\n                this.setState({images: []})\r\n            }else {\r\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n                    .then(res => this.setState({images: res.data.hits}))\r\n                    .catch(err => console.log(err));\r\n            }\r\n        });\r\n    };\r\n\r\n    OnAmountChange = (e, index, value) => this.setState({amount: value});\r\n\r\n    render() {\r\n        console.log(this.state.images);\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    name=\"searchText\"\r\n                    value={this.state.searchText}\r\n                    onChange={this.OnTextChange}\r\n                    floatingLabelText=\"Search For Images\"\r\n                    fullWidth={true}\r\n                />\r\n\r\n                <SelectField\r\n                    name=\"amount\"\r\n                    floatingLabelText='Amount'\r\n                    value={this.state.amount}\r\n                    onChange={this.OnAmountChange}\r\n                >\r\n                    <MenuItem value={5}  primaryText='5' />\r\n                    <MenuItem value={10} primaryText='10'/>\r\n                    <MenuItem value={15} primaryText='15'/>\r\n                    <MenuItem value={30} primaryText='30'/>\r\n                    <MenuItem value={50} primaryText='50'/>\r\n\r\n                </SelectField>\r\n                {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport NavBar from './components/navbar/NavBar'\nimport Search from './components/search/Search'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <MuiThemeProvider>\n          <div>\n              <NavBar />\n            <Search />\n          </div>\n        </MuiThemeProvider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}